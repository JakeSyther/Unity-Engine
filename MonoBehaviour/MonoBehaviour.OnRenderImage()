MonoBehaviour.OnRenderImage() is a method in the MonoBehaviour class that is called after rendering is complete, 
but before the image is displayed on the screen. This method allows developers to manipulate the final rendered image before it is displayed, 
such as by applying post-processing effects like blurring, color correction, or distortion.

The OnRenderImage() method takes two parameters: source and destination.
source is the input RenderTexture that contains the rendered image,
and destination is the output RenderTexture that will be displayed on the screen. 
The method returns void, indicating that it does not return any values.

An example of how to use OnRenderImage() to apply a simple post-processing effect,
such as a grayscale filter, to the rendered image:
-----------------------------------------------------------------------------------------------------------------------------
using UnityEngine;

public class GrayscaleEffect : MonoBehaviour
{
    public Material material; // The material to use for the effect

    private void OnRenderImage(RenderTexture source, RenderTexture destination)
    {
        Graphics.Blit(source, destination, material); // Apply the material to the source and output to destination
    }
}
-----------------------------------------------------------------------------------------------------------------------------

This example, we have a Material called material that contains a shader with a grayscale effect. 
We apply this material to the source texture using the Graphics.Blit() method, and output the result to the destination texture.
This will apply the grayscale effect to the rendered image before it is displayed on the screen.

Note that OnRenderImage() is called after rendering is complete, so any changes made to the destination texture will be visible on the screen. 
However, this method can be computationally expensive, so it should be used sparingly and with caution to avoid impacting the performance of the game.



