UnityEngine.Ray is a structure in Unity that represents a line in 3D space starting at a point and going in a specific direction.
It is often used to cast rays in a game to detect collisions or interact with game objects.

Variables
origin: A Vector3 representing the starting point of the ray.
direction: A Vector3 representing the direction of the ray.

Constructors
Ray(Vector3 origin, Vector3 direction): Creates a new Ray with the specified origin and direction.

Functions
GetPoint(float distance): Returns a Vector3 representing a point along the ray at the specified distance from the origin.

Methods
ToString(): Returns a string representation of the Ray object.

Example Usage
An example of using Ray to cast a ray from the mouse position and detect a collision with a game object:

using UnityEngine;

public class RaycastExample : MonoBehaviour
{
    void Update()
    {
        // Cast a ray from the mouse position
        Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);

        // Check if the ray intersects a game object
        RaycastHit hit;
        if (Physics.Raycast(ray, out hit))
        {
            // Print the name of the game object that was hit
            Debug.Log("Hit object: " + hit.collider.gameObject.name);
        }
    }
}

In this example, the Update() function is called every frame. 
It first creates a new Ray object using Camera.main.ScreenPointToRay(Input.mousePosition) to cast a ray from the mouse position. 
Then, it calls Physics.Raycast(ray, out hit) to check if the ray intersects with any game objects in the scene.
If it does, it prints the name of the game object that was hit to the console using Debug.Log().




Unity Data "Ray";
-----------------------------------------------------------------------------
using System;
using System.Globalization;

namespace UnityEngine
{
    //
    // Summary:
    //     Representation of rays.
    public struct Ray : IFormattable
    {
        private Vector3 m_Origin;

        private Vector3 m_Direction;

        //
        // Summary:
        //     The origin point of the ray.
        public Vector3 origin
        {
            get
            {
                return m_Origin;
            }
            set
            {
                m_Origin = value;
            }
        }

        //
        // Summary:
        //     The direction of the ray.
        public Vector3 direction
        {
            get
            {
                return m_Direction;
            }
            set
            {
                m_Direction = value.normalized;
            }
        }

        //
        // Summary:
        //     Creates a ray starting at origin along direction.
        //
        // Parameters:
        //   origin:
        //
        //   direction:
        public Ray(Vector3 origin, Vector3 direction)
        {
            m_Origin = origin;
            m_Direction = direction.normalized;
        }

        //
        // Summary:
        //     Returns a point at distance units along the ray.
        //
        // Parameters:
        //   distance:
        public Vector3 GetPoint(float distance)
        {
            return m_Origin + m_Direction * distance;
        }

        //
        // Summary:
        //     Returns a formatted string for this ray.
        //
        // Parameters:
        //   format:
        //     A numeric format string.
        //
        //   formatProvider:
        //     An object that specifies culture-specific formatting.
        public override string ToString()
        {
            return ToString(null, null);
        }

        //
        // Summary:
        //     Returns a formatted string for this ray.
        //
        // Parameters:
        //   format:
        //     A numeric format string.
        //
        //   formatProvider:
        //     An object that specifies culture-specific formatting.
        public string ToString(string format)
        {
            return ToString(format, null);
        }

        //
        // Summary:
        //     Returns a formatted string for this ray.
        //
        // Parameters:
        //   format:
        //     A numeric format string.
        //
        //   formatProvider:
        //     An object that specifies culture-specific formatting.
        public string ToString(string format, IFormatProvider formatProvider)
        {
            if (string.IsNullOrEmpty(format))
            {
                format = "F2";
            }

            if (formatProvider == null)
            {
                formatProvider = CultureInfo.InvariantCulture.NumberFormat;
            }

            return UnityString.Format("Origin: {0}, Dir: {1}", m_Origin.ToString(format, formatProvider), m_Direction.ToString(format, formatProvider));
        }
    }
}
-----------------------------------------------------------------------------
