The UnityEngine.CoreModule is a part of the Unity engine's core runtime and contains the fundamental classes and structures for building games in Unity.
It is automatically included in all Unity projects and provides a wide range of functionality, including:

* Basic data types such as integers, floats, booleans, and strings
* Common data structures like arrays, lists, and dictionaries
* Common math functions like trigonometric and logarithmic functions
* Core engine functionality like time management, input handling, and debugging utilities
* Low-level system functionality like file I/O, networking, and platform-specific APIs

- A list of all the namespaces contained in the UnityEngine.CoreModule:

* UnityEngine                 : The primary namespace for the Unity engine.
* UnityEngine.Assertions      : Contains classes and methods for asserting the correctness of code during runtime.
* UnityEngine.Collections     : Contains collections like lists and dictionaries that are optimized for use in Unity.
* UnityEngine.Events          : Contains classes for defining and handling events in Unity.
* UnityEngine.Internal        : Contains internal Unity classes and methods that are not intended for public use.
* UnityEngine.Profiling       : Contains classes for profiling and optimizing code in Unity.
* UnityEngine.SceneManagement : Contains classes for managing scenes and the loading and unloading of game objects.
* UnityEngine.Scripting       : Contains classes and methods for scripting in Unity, including support for C# scripting.
* UnityEngine.Serialization   : Contains classes and methods for serialization and deserialization in Unity.
* UnityEngine.U2D             : Contains classes and structures for working with 2D graphics in Unity.
* UnityEngine.UI              : Contains classes and structures for building user interfaces in Unity.
* UnityEngine.XR              : Contains classes and structures for working with virtual and augmented reality in Unity.


In addition to the namespaces, the UnityEngine.CoreModule contains many classes, structures, and methods that are fundamental to building games in Unity. 

Here are some examples:

* Mathf: A static class that contains many commonly used mathematical functions like sin, cos, and sqrt.
* Time: A static class that contains information about the current time in the game, 
  including the time since the game started and the time since the last frame was rendered.
* Debug: A static class that contains methods for logging messages and warnings to the Unity console.
* GameObject: A class that represents a game object in Unity and provides methods for working with game objects like adding and removing components, 
  setting the transform, and finding game objects by name.
* Transform: A class that represents the transform of a game object in Unity and provides methods for working with the position, rotation,
  and scale of the game object.
* Vector3: A structure that represents a 3D vector in Unity and provides methods for working with vectors, including adding and subtracting vectors,
  finding the dot and cross products, and normalizing vectors.
* WaitForSeconds: A class that represents a yield instruction in a coroutine, causing the coroutine to pause for a specified amount of time before continuing.


This is just a brief overview of the UnityEngine.CoreModule.
There are many more classes, structures, and methods in the module that are fundamental to building games in Unity.




Classes
AddComponentMenu:	The AddComponentMenu attribute allows you to place a script anywhere in the "Component" menu, instead of just the "Component->Scripts" menu.
AlwaysLinkAssemblyAttribute	Ensure an assembly is always processed during managed code stripping.
AnimationCurve	Store a collection of Keyframes that can be evaluated over time.
Application	Access to application run-time data.
Application	Provides essential methods related to Window Store application.
Application	Access to platform-specific application runtime data.
AssemblyIsEditorAssembly	Assembly level attribute. Any classes in an assembly with this attribute will be considered to be Editor Classes.
Assert	The Assert class contains assertion methods for setting invariants in the code.
AssertionException	An exception that is thrown when an assertion fails.
AsyncGPUReadback	Allows the asynchronous read back of GPU resources.
AsyncOperation	Asynchronous operation coroutine.
AsyncReadManager	With the AsyncReadManager, you can perform asynchronous I/O operations through Unity's virtual file system. You can perform these operations on any thread or job.
AsyncReadManagerMetrics	Manages the recording and retrieval of metrics from the AsyncReadManager.
AsyncReadManagerMetricsFilters	Defines a filter for selecting specific categories of data when summarizing AsyncReadManager metrics.
AsyncReadManagerSummaryMetrics	A summary of the metrics collected for AsyncReadManager read operations.
BatchRendererGroup	A group of batches.
BeforeRenderOrderAttribute	Use this BeforeRenderOrderAttribute when you need to specify a custom callback order for Application.onBeforeRender.
Behaviour	Behaviours are Components that can be enabled or disabled.
BillboardAsset	BillboardAsset describes how a billboard is rendered.
BillboardRenderer	Renders a billboard from a BillboardAsset.
BurstAuthorizedExternalMethodAttribute	The BurstAuthorizedExternalMethod attribute lets you mark a function as being authorized for Burst to call from within a static constructor.
BurstDiscardAttribute	The BurstDiscard attribute lets you remove a method or property from being compiled to native code by the burst compiler.
Caching	The Caching class lets you manage cached AssetBundles, downloaded using UnityWebRequestAssetBundle.GetAssetBundle().
Camera	A Camera is a device through which the player views the world.
CollectionPool<T0,T1>	A Collection such as List, HashSet, Dictionary etc can be pooled and reused by using a CollectionPool.
ColorUsageAttribute	Attribute used to configure the usage of the ColorField and Color Picker for a color.
ColorUtility	A collection of common color functions.
CommandBuffer	List of graphics commands to execute.
CommandBufferExtensions	Static class providing extension methods for CommandBuffer.
Component	Base class for everything attached to a GameObject.
ComputeBuffer	GPU data buffer, mostly for use with compute shaders.
ComputeShader	Compute Shader asset.
ContextMenu	The ContextMenu attribute allows you to add commands to the context menu.
ContextMenuItemAttribute	Use this attribute to add a context menu to a field that calls a named method.
Coroutine	MonoBehaviour.StartCoroutine returns a Coroutine. Instances of this class are only used to reference these coroutines, and do not hold any exposed properties or functions.
Coverage	Describes the interface for the code coverage data exposed by mono.
CrashReport	Holds data for a single application crash event and provides access to all gathered crash reports.
CrashReporting	Exposes useful information related to crash reporting on Windows platforms.
CreateAssetMenuAttribute	Mark a ScriptableObject-derived type to be automatically listed in the Assets/Create submenu, so that instances of the type can be easily created and stored in the project as ".asset" files.
Crypto	Class representing cryptography algorithms.
Cubemap	Class for handling cube maps, Use this to create or modify existing cube map assets.
CubemapArray	Class for handling Cubemap arrays.
CullingGroup	Describes a set of bounding spheres that should have their visibility and distances maintained.
Cursor	Cursor API for setting the cursor (mouse pointer).
Cursor	Cursor API for Windows Store Apps.
CustomRenderTexture	Custom Render Textures are an extension to Render Textures that allow you to render directly to the Texture using a Shader.
CustomRenderTextureManager	Custom Render Texture Manager.
CustomSampler	Custom CPU Profiler label used for profiling arbitrary code blocks.
CustomYieldInstruction	Base class for custom yield instructions to suspend coroutines.
DataUtility	Helper utilities for accessing Sprite data.
DeallocateOnJobCompletionAttribute	Automatically deallocates the native container when the job is finished.
Debug	Class containing methods to ease debugging while developing a game.
DelayedAttribute	Attribute used to make a float, int, or string variable in a script be delayed.
Device	Interface into tvOS specific functionality.
Device	Interface into iOS specific functionality.
DictationRecognizer	DictationRecognizer listens to speech input and attempts to determine what phrase was uttered.
DictionaryPool<T0,T1>	A version of CollectionPool<T0,T1> for Dictionaries.
Directory	Exposes static methods for directory operations.
DisallowMultipleComponent	Prevents MonoBehaviour of same type (or subtype) to be added more than once to a GameObject.
Display	Provides access to a display / screen for rendering operations.
DisposeSentinel	DisposeSentinel is used to automatically detect memory leaks.
DynamicGI	Allows to control the dynamic Global Illumination.
ExcludeFromCoverageAttribute	Allows you to exclude an Assembly, Class, Constructor, Method or Struct from Coverage.
ExcludeFromObjectFactoryAttribute	Add this attribute to a class to prevent the class and its inherited classes from being created with ObjectFactory methods.
ExcludeFromPresetAttribute	Add this attribute to a class to prevent creating a Preset from the instances of the class.
ExecuteAlways	Makes instances of a script always execute, both as part of Play Mode and when editing.
ExecuteInEditMode	Makes all instances of a script execute in Edit Mode.
ExternalGPUProfiler	The ExternalGPUProfiler API allows developers to programatically take GPU frame captures in conjunction with supported external GPU profilers. GPU frame captures can be used to both analyze performance and debug graphics related issues.
File	Provides static methods for file operations.
Flare	A flare asset. Read more about flares in the components reference.
FlareLayer	FlareLayer component.
FloatComparer	A float comparer used by Assert performing approximate comparison.
FormerlySerializedAsAttribute	Use this attribute to rename a field without losing its serialized value.
FrameCapture	Interface to control XCode Frame Capture.
FrameDebugger	Controls the Frame Debugger from a script.
FrameTimingManager	The FrameTimingManager allows the user to capture and access FrameTiming data for multiple frames.
GameObject	Base class for all entities in Unity Scenes.
GarbageCollector	API to control the garbage collector on the Mono and IL2CPP scripting backends.
GenericPool<T0>	Provides a static implementation of ObjectPool<T0>.
GeometryUtility	Utility class for common geometric functions.
Gizmos	Gizmos are used to give visual debugging or setup aids in the Scene view.
GL	Low-level graphics library.
Gradient	Gradient used for animating colors.
GradientUsageAttribute	Attribute used to configure the usage of the GradientField and Gradient Editor for a gradient.
GrammarRecognizer	The GrammarRecognizer is a complement to the KeywordRecognizer. In many cases developers will find the KeywordRecognizer fills all their development needs. However, in some cases, more complex grammars will be better expressed in the form of an xml file on disk. The GrammarRecognizer uses Extensible Markup Language (XML) elements and attributes, as specified in the World Wide Web Consortium (W3C) Speech Recognition Grammar Specification (SRGS) Version 1.0. These XML elements and attributes represent the rule structures that define the words or phrases (commands) recognized by speech recognition engines.
Graphics	Raw interface to Unity's drawing functions.
GraphicsBuffer	GPU graphics data buffer, for working with geometry or compute shader data.
GraphicsSettings	Script interface for Graphics Settings.
Handheld	Interface into functionality unique to handheld devices.
HashSetPool<T0>	A version of CollectionPool<T0,T1> for HashSets.
HashUnsafeUtilities	Utilities to compute hashes with unsafe code.
HashUtilities	Utilities to compute hashes.
HDROutputSettings	Provides access to HDR display settings and information.
HeaderAttribute	Use this PropertyAttribute to add a header above some fields in the Inspector.
HelpURLAttribute	Provide a custom documentation URL for a class.
HideInInspector	Makes a variable not show up in the inspector but be serialized.
HybridV2ShaderReflection	Contains methods for reading Hybrid Renderer specific reflection data from shaders.
IconAttribute	Attribute to specify an icon for a MonoBehaviour or ScriptableObject.
IJobExtensions	Extension methods for Jobs using the IJob interface.
IJobForExtensions	Extension methods for Jobs using the IJobFor.
IJobParallelForExtensions	Extension methods for Jobs using the IJobParallelFor.
IJobParallelForTransformExtensions	Extension methods for IJobParallelForTransform.
ImageEffectAfterScale	Any Image Effect with this attribute will be rendered after Dynamic Resolution stage.
ImageEffectAllowedInSceneView	Any Image Effect with this attribute can be rendered into the Scene view camera.
ImageEffectOpaque	Any Image Effect with this attribute will be rendered after opaque geometry but before transparent geometry.
ImageEffectTransformsToLDR	When using HDR rendering it can sometime be desirable to switch to LDR rendering during ImageEffect rendering.
ImageEffectUsesCommandBuffer	Use this attribute when image effects are implemented using Command Buffers.
Input	Provides static methods for Windows specific input manipulation.
InspectorNameAttribute	Use this attribute on enum value declarations to change the display name shown in the Inspector.
JobHandleUnsafeUtility	JobHandle Unsafe Utilities.
JobProducerTypeAttribute	All job interface types must be marked with the JobProducerType. This is used to compile the Execute method by the Burst ASM inspector.
JobsUtility	Static class containing functionality to create, run and debug jobs.
KeywordRecognizer	KeywordRecognizer listens to speech input and attempts to match uttered phrases to a list of registered keywords.
Launcher	Class which is capable of launching user's default app for file type or a protocol. See also PlayerSettings where you can specify file or URI associations.
LensFlare	Script interface for a Lens flare component.
LicenseInformation	This class provides information regarding application's trial status and allows initiating application purchase.
Light	Script interface for light components.
Light2DBase	Provides a base class for 2D lights.
LightingSettings	An object containing settings for precomputing lighting data, that Unity can serialize as a Lighting Settings Asset.
LightmapData	Data of a lightmap.
LightmapperUtils	Utility class for converting Unity Lights to light types recognized by the baking backends.
Lightmapping	Interface to the light baking backends.
LightmapSettings	Stores lightmaps of the Scene.
LightProbeGroup	Light Probe Group.
LightProbeProxyVolume	The Light Probe Proxy Volume component offers the possibility to use higher resolution lighting for large non-static GameObjects.
LightProbes	Stores light probe data for all currently loaded Scenes.
LineRenderer	The line renderer is used to draw free-floating lines in 3D space.
LineUtility	A collection of common line functions.
LinkedPool<T0>	A linked list version of IObjectPool<T0>.
ListPool<T0>	A version of CollectionPool<T0,T1> for Lists.
LODGroup	LODGroup lets you group multiple Renderers into LOD levels.
Logger	Initializes a new instance of the Logger.
Material	The material class.
MaterialPropertyBlock	A block of material values to apply.
MemoryProfiler	Memory profiling API container class.
Mesh	A class that allows you to create or modify meshes.
MeshFilter	A class to access the Mesh of the mesh filter.
MeshRenderer	Renders meshes inserted by the MeshFilter or TextMesh.
MessageEventArgs	Arguments passed to Action callbacks registered in PlayerConnection.
MetaData	Container for memory snapshot meta data.
MinAttribute	Attribute used to make a float or int variable in a script be restricted to a specific minimum value.
MonoBehaviour	MonoBehaviour is the base class from which every Unity script derives.
MultilineAttribute	Attribute to make a string be edited with a multi-line textfield.
NativeArrayUnsafeUtility	NativeArray Unsafe Utility.
NativeContainerAttribute	Allows you to create your own custom native container.
NativeContainerIsAtomicWriteOnlyAttribute	NativeContainerIsAtomicWriteOnlyAttribute.
NativeContainerIsReadOnlyAttribute	NativeContainerIsReadOnlyAttribute.
NativeContainerSupportsDeallocateOnJobCompletionAttribute	Indicates that a native container can be automatically deallocated.
NativeContainerSupportsDeferredConvertListToArray	NativeContainerSupportsDeferredConvertListToArray.
NativeContainerSupportsMinMaxWriteRestrictionAttribute	NativeContainerSupportsMinMaxWriteRestrictionAttribute.
NativeDisableContainerSafetyRestrictionAttribute	By default native containers are tracked by the safety system to avoid race conditions. The safety system encapsulates the best practices and catches many race condition bugs from the start.
NativeDisableParallelForRestrictionAttribute	NativeDisableParallelForRestrictionAttribute.
NativeDisableUnsafePtrRestrictionAttribute	By default unsafe Pointers are not allowed to be used in a job since it is not possible for the Job Debugger to gurantee race condition free behaviour. This attribute lets you explicitly disable the restriction on a job.
NativeFixedLengthAttribute	The container has from start a size that will never change.
NativeLeakDetection	Static class for native leak detection settings.
NativeSetClassTypeToNullOnScheduleAttribute	When this attribute is applied to a field in a job struct, the managed reference to the class will be set to null on the copy of the job struct that is passed to the job.
NativeSetThreadIndexAttribute	This attribute can inject a worker thread index into an int on the job struct. This is usually used in the implementation of atomic containers. The index is guaranteed to be unique to any other job that might be running in parallel.
NativeSliceUnsafeUtility	NativeSlice unsafe utility class.
NonReorderableAttribute	Disables reordering of an array or list in the Inspector window.
Notification	Default implementation for Playable notifications.
Object	Base class for all objects Unity can reference.
ObjectPool<T0>	A stack based IObjectPool<T0>.
OcclusionArea	OcclusionArea is an area in which occlusion culling is performed.
OcclusionPortal	The portal for dynamically changing occlusion at runtime.
OnDemandRendering	Use the OnDemandRendering class to control and query information about your application's rendering speed independent from all other subsystems (such as physics, input, or animation).
OnDemandResources	On Demand Resources API.
OnDemandResourcesRequest	Represents a request for On Demand Resources (ODR). It's an AsyncOperation and can be yielded in a coroutine.
PhotoCapture	Captures a photo from the web camera and stores it in memory or on disk.
PhotoCaptureFrame	Contains information captured from the web camera.
PhraseRecognitionSystem	Phrase recognition system is responsible for managing phrase recognizers and dispatching recognition events to them.
PhraseRecognizer	A common base class for both keyword recognizer and grammar recognizer.
Ping	Ping any given IP address (given in dot notation).
PIX	Provides an interface to control GPU frame capture in Microsoft's PIX software.
PixelPerfectRendering	A collection of APIs that facilitate pixel perfect rendering of sprite-based renderers.
PlayableAsset	A base class for assets that can be used to instantiate a Playable at runtime.
PlayableBehaviour	PlayableBehaviour is the base class from which every custom playable script derives.
PlayableExtensions	Extensions for all the types that implements IPlayable.
PlayableOutputExtensions	Extensions for all the types that implements IPlayableOutput.
PlayerConnection	Used for handling the network connection from the Player to the Editor.
PlayerLoop	The class representing the player loop in Unity.
PlayerPrefs	PlayerPrefs is a class that stores Player preferences between game sessions. It can store string, float and integer values into the user’s platform registry.
PlayerPrefsException	An exception thrown by the PlayerPrefs class in a web player build.
PreferBinarySerialization	Prefer ScriptableObject derived type to use binary serialization regardless of project's asset serialization mode.
PreserveAttribute	PreserveAttribute prevents byte code stripping from removing a class, method, field, or property.
Profiler	Controls the Profiler from script.
ProfilerUnsafeUtility	Utility class which provides access to low level Profiler API.
Projector	A script interface for a projector component.
PropertyAttribute	Base class to derive custom property attributes from. Use this to create custom attributes for script variables.
QualitySettings	Script interface for Quality Settings.
Random	Easily generate random data for games.
RangeAttribute	Attribute used to make a float or int variable in a script be restricted to a specific range.
RayTracingAccelerationStructure	A data structure used to represent the Renderers in the Scene for GPU ray tracing.
RayTracingShader	A shader for GPU ray tracing.
ReadOnlyAttribute	The ReadOnly attribute lets you mark a member of a struct used in a job as read-only.
Recorder	Records profiling data produced by a specific Sampler.
RectOffset	Offsets for rectangles, borders, etc.
RectTransform	Position, size, anchor and pivot information for a rectangle.
ReflectionProbe	The reflection probe is used to capture the surroundings into a texture which is passed to the shaders and used for reflections.
Remote	A class for Apple TV remote input configuration.
Renderer	General functionality for all renderers.
RendererExtensions	Extension methods to the Renderer class, used only for the UpdateGIMaterials method used by the Global Illumination System.
RenderPipeline	Defines a series of commands and settings that describes how Unity renders a frame.
RenderPipelineAsset	An asset that produces a specific IRenderPipeline.
RenderPipelineGlobalSettings	A ScriptableObject to associate with a RenderPipeline and store project-wide settings for that Pipeline.
RenderPipelineManager	Render Pipeline manager.
RenderSettings	Experimental render settings features.
RenderSettings	The Render Settings contain values for a range of visual elements in your Scene, like fog and ambient light.
RenderSettings	Experimental render settings features.
RenderTexture	Render textures are textures that can be rendered to.
ReplayKit	ReplayKit is only available on certain iPhone, iPad and iPod Touch devices running iOS 9.0 or later.
RequireAttributeUsagesAttribute	Only allowed on attribute types. If the attribute type is marked, then so too will all CustomAttributes of that type.
RequireComponent	The RequireComponent attribute automatically adds required components as dependencies.
RequireDerivedAttribute	When the type is marked, all types derived from that type will also be marked.
RequiredInterfaceAttribute	When a type is marked, all interface implementations of the specified types will be marked.
RequiredMemberAttribute	When a type is marked, all of it's members with [RequiredMember] will be marked.
RequireImplementorsAttribute	When the interface type is marked, all types implementing that interface will be marked.
ResourceRequest	Asynchronous load request from the Resources bundle.
Resources	The Resources class allows you to find and access Objects including assets.
ResourcesAPI	Derive from this base class to provide alternative implementations to the C# behavior of specific Resources methods.
RuntimeInitializeOnLoadMethodAttribute	Allow a runtime class method to be initialized when a game is loaded at runtime without action from the user.
Sampler	Provides control over a CPU Profiler label.
ScalableBufferManager	Scales render textures to support dynamic resolution if the target platform/graphics API supports it.
SceneManager	Scene management at run-time.
SceneManagerAPI	Derive from this base class to provide alternative implementations to the C# behavior of specific SceneManager methods.
SceneUtility	Scene and Build Settings related utilities.
Screen	Provides access to display information.
Screen	Access platform-specific display information.
ScriptableObject	A class you can derive from if you want to create objects that don't need to be attached to game objects.
ScriptableRuntimeReflectionSystem	Empty implementation of IScriptableRuntimeReflectionSystem.
ScriptableRuntimeReflectionSystemSettings	Global settings for the scriptable runtime reflection system.
ScriptPlayableBinding	A PlayableBinding that contains information representing a ScriptingPlayableOutput.
SearchContextAttribute	This attribute can be attached to a component object field in order to have the ObjectField use the advanced Object Picker.
Security	Webplayer security related class. Not supported from 5.4.0 onwards.
SelectionBaseAttribute	Add this attribute to a script class to mark its GameObject as a selection base object for Scene View picking.
SerializeField	Force Unity to serialize a private field.
SerializeReference	A scripting attribute that instructs Unity to serialize a field as a reference instead of as a value.
Shader	Shader scripts used for all rendering.
ShaderVariantCollection	ShaderVariantCollection records which shader variants are actually used in each shader.
ShaderWarmup	Prewarms shaders in a way that is supported by all graphics APIs.
SkinnedMeshRenderer	The Skinned Mesh filter.
Skybox	A script interface for the skybox component.
SleepTimeout	Constants for special values of Screen.sleepTimeout.
Snapping	Snap values to rounded increments.
SortingGroup	Adding a SortingGroup component to a GameObject will ensure that all Renderers within the GameObject's descendants will be sorted and rendered together.
SpaceAttribute	Use this PropertyAttribute to add some spacing in the Inspector.
SparseTexture	Class for handling Sparse Textures.
SplashScreen	Provides an interface to the Unity splash screen.
Sprite	Represents a Sprite object for use in 2D gameplay.
SpriteAtlas	Sprite Atlas is an asset created within Unity. It is part of the built-in sprite packing solution.
SpriteAtlasManager	Manages SpriteAtlas during runtime.
SpriteDataAccessExtensions	A list of methods designed for reading and writing to the rich internal data of a Sprite.
SpriteRenderer	Renders a Sprite for 2D graphics.
SpriteRendererDataAccessExtensions	A list of methods that allow the caller to override what the SpriteRenderer renders.
StaticBatchingUtility	StaticBatchingUtility can prepare your objects to take advantage of Unity's static batching.
SupportedRenderingFeatures	Describes the rendering features supported by a given render pipeline.
SystemInfo	Access system and hardware information.
SystemInfo	Access platform-specific system and hardware information.
TextAreaAttribute	Attribute to make a string be edited with a height-flexible and scrollable text area.
TextAsset	Represents a raw text or binary file asset.
Texture	Base class for Texture handling.
Texture2D	Class that represents textures in C# code.
Texture2DArray	Class for handling 2D texture arrays.
Texture3D	Class for handling 3D Textures, Use this to create 3D texture assets.
TexturePlayableBinding	A PlayableBinding that contains information representing a TexturePlayableOutput.
Tile	Represents tile on Windows start screen
Time	Provides an interface to get time information from Unity.
Toast	Represents a toast notification in Windows Store Apps.
TooltipAttribute	Specify a tooltip for a field in the Inspector window.
TouchScreenKeyboard	Interface for on-screen keyboards. Only native iPhone, Android, and Windows Store Apps are supported.
TrailRenderer	The trail renderer is used to make trails behind objects in the Scene as they move about.
Transform	Position, rotation and scale of an object.
UnityAPICompatibilityVersionAttribute	Declares an assembly to be compatible (API wise) with a specific Unity API. Used by internal tools to avoid processing the assembly in order to decide whether assemblies may be using old Unity API.
UnityEvent	A zero argument persistent callback that can be saved with the Scene.
UnityEvent<T0,T1,T2,T3>	Four argument version of UnityEvent.
UnityEvent<T0,T1,T2>	Three argument version of UnityEvent.
UnityEvent<T0,T1>	Two argument version of UnityEvent.
UnityEvent<T0>	One argument version of UnityEvent.
UnityEventBase	Abstract base class for UnityEvents.
UnsafeGenericPool<T0>	Provides a static implementation of ObjectPool<T0>.
UnsafeUtility	Unsafe utility class.
UsesLuminPlatformLevelAttribute	This attribute provides a way to declaratively define a Lumin platform level requirement that is automatically added to the manifest at build time.
UsesLuminPrivilegeAttribute	This attribute provides a way to declaratively define a Lumin privilege requirement that is automatically added to the manifest at build time.
Utils	A utility class that you can use for diagnostic purposes.
VideoCapture	Records a video from the web camera directly to disk.
VirtualFileSystem	Class that provides access to some of the Unity low level virtual file system APIs.
WaitForEndOfFrame	Waits until the end of the frame after Unity has rendererd every Camera and GUI, just before displaying the frame on screen.
WaitForFixedUpdate	Waits until next fixed frame rate update function. See Also: FixedUpdate.
WaitForSeconds	Suspends the coroutine execution for the given amount of seconds using scaled time.
WaitForSecondsRealtime	Suspends the coroutine execution for the given amount of seconds using unscaled time.
WaitUntil	Suspends the coroutine execution until the supplied delegate evaluates to true.
WaitWhile	Suspends the coroutine execution until the supplied delegate evaluates to false.
WebCam	Contains general information about the current state of the web camera.
WriteAccessRequiredAttribute	Used in conjunction with the ReadOnlyAttribute, WriteAccessRequiredAttribute lets you specify which struct method and property require write access to be invoked.
WriteOnlyAttribute	The WriteOnly attribute lets you mark a member of a struct used in a job as write-only.
YieldInstruction	Base class for all yield instructions.
Structs
AsyncGPUReadbackRequest	Represents an asynchronous request for a GPU resource.
AsyncReadManagerRequestMetric	Metrics for an individual read request.
AtomicSafetyHandle	AtomicSafetyHandle is used by the job system to coordinate access to container memory from multiple jobs safely.
AttachmentDescriptor	A declaration of a single color or depth rendering surface to be attached into a RenderPass.
BatchCullingContext	Culling context for a batch.
BatchQueryJob<T0,T1>	Struct used to implement batch query jobs.
BatchQueryJobStruct<T0>	Struct used to schedule batch query jobs.
BatchVisibility	Describes the visibility for a batch.
BlendState	Values for the blend state.
BoneWeight	Describes 4 skinning bone weights that affect a vertex in a mesh.
BoneWeight1	Describes a bone weight that affects a vertex in a mesh.
BoundingSphere	Describes a single bounding sphere for use by a CullingGroup.
Bounds	Represents an axis aligned bounding box.
BoundsInt	Represents an axis aligned bounding box with all values as integers.
Cache	Data structure for cache. Please refer to See Also:Caching.AddCache for more information.
CachedAssetBundle	Data structure for downloading AssetBundles to a customized cache path. See Also:UnityWebRequestAssetBundle.GetAssetBundle for more information.
CameraParameters	When calling PhotoCapture.StartPhotoModeAsync, you must pass in a CameraParameters object that contains the various settings that the web camera will use.
CameraPlayable	An implementation of IPlayable that produces a Camera texture.
CameraProperties	Camera related properties in CullingParameters.
Color	Representation of RGBA colors.
Color32	Representation of RGBA colors in 32 bit format.
CombineInstance	Struct used to describe meshes to be combined using Mesh.CombineMeshes.
Cookie	A helper structure used to initialize a LightDataGI structure with cookie information.
CoveredMethodStats	Describes the summary of the code coverage for the specified method used by Coverage. For an example of typical usage, see Coverage.GetStatsFor.
CoveredSequencePoint	Describes a covered sequence point used by Coverage. For an example of typical usage, see Coverage.GetSequencePointsFor.
CreateSceneParameters	This struct collects all the CreateScene parameters in to a single place.
CullingGroupEvent	Provides information about the current and previous states of one sphere in a CullingGroup.
CullingResults	A struct containing the results of a culling operation.
CustomRenderTextureUpdateZone	Structure describing an Update Zone.
DebugScreenCapture	A raw data representation of a screenshot.
DepthState	Values for the depth state.
DirectionalLight	A helper structure used to initialize a LightDataGI structure as a directional light.
DiscLight	A helper structure used to initialize a LightDataGI structure as a disc light.
DisplayInfo	Represents a connected display.
DOTSInstancingCbuffer	Reflection data for a DOTS instancing constant buffer.
DOTSInstancingProperty	Reflection data for a DOTS instancing property.
DrawingSettings	Settings for ScriptableRenderContext.DrawRenderers.
DrivenRectTransformTracker	A component can be designed to drive a RectTransform. The DrivenRectTransformTracker struct is used to specify which RectTransforms it is driving.
EarlyUpdate	Update phase in the native player loop.
ExposedPropertyResolver	Object that is used to resolve references to an ExposedReference field.
ExposedReference<T0>	Creates a type whos value is resolvable at runtime.
FileHandle	A handle to an asynchronously opened file.
FileInfoResult	The results of an asynchronous AsyncReadManager.GetFileInfo call.
FilteringSettings	A struct that represents filtering settings for ScriptableRenderContext.DrawRenderers.
FixedUpdate	Update phase in the native player loop.
FrameData	This structure contains the frame information a Playable receives in Playable.PrepareFrame.
FrameTiming	Struct containing basic FrameTimings and accompanying relevant data.
FrustumPlanes	This struct contains the view space coordinates of the near projection plane.
GlobalKeyword	Represents a global shader keyword.
GradientAlphaKey	Alpha key used by Gradient.
GradientColorKey	Color key used by Gradient.
GraphicsFence	Used to manage synchronisation between tasks on async compute queues and the graphics queue.
Hash128	Represents a 128-bit hash value.
Initialization	Update phase in the native player loop.
JobHandle	A handle to a job, which uniquely identifies a job scheduled in the job system.
JobRanges	Struct containing information about a range the job is allowed to work on.
Keyframe	A single keyframe that can be injected into an animation curve.
LayerMask	Specifies Layers to use in a Physics.Raycast.
LazyLoadReference<T0>	Serializable lazy reference to a UnityEngine.Object contained in an asset file.
LightBakingOutput	Struct describing the result of a Global Illumination bake for a given light.
LightDataGI	The interop structure to pass light information to the light baking backends. There are helper structures for Directional, Point, Spot and Rectangle lights to correctly initialize this structure.
LinearColor	Contains normalized linear color values for red, green, blue in the range of 0 to 1, and an additional intensity value.
LoadSceneParameters	This struct collects all the LoadScene parameters in to a single place.
LocalKeyword	Represents a shader keyword declared in a shader source file.
LocalKeywordSpace	Represents the local keyword space of a Shader or ComputeShader.
LOD	Structure for building a LOD for passing to the SetLODs function.
LODParameters	LODGroup culling parameters.
MaterialEffectPlayable	An implementation of IPlayable that allows application of a Material shader to one or many texture inputs to produce a texture output.
Mathf	A collection of common math functions.
Matrix4x4	A standard 4x4 transformation matrix.
NativeArray<T0>	A NativeArray exposes a buffer of native memory to managed code, making it possible to share data between managed and native without marshalling costs.
NativeSlice<T0>	Native Slice.
PassIdentifier	Represents an opaque identifier of a specific Pass in a Shader.
PhraseRecognizedEventArgs	Provides information about a phrase recognized event.
Plane	Representation of a plane in 3D space.
PlatformKeywordSet	A collection of ShaderKeyword that represents a specific platform variant.
Playable	Playables are customizable runtime objects that can be connected together and are contained in a PlayableGraph to create complex behaviours.
PlayableBinding	Struct that holds information regarding an output of a PlayableAsset.
PlayableGraph	Use the PlayableGraph to manage Playable creations and destructions.
PlayableOutput	See: IPlayableOutput.
PlayerLoopSystem	The representation of a single system being updated by the player loop in Unity.
PointLight	A helper structure used to initialize a LightDataGI structure as a point light.
Pose	Representation of a Position, and a Rotation in 3D Space
PostLateUpdate	Update phase in the native player loop.
PreLateUpdate	Update phase in the native player loop.
PreUpdate	Update phase in the native player loop.
ProfilerCategory	Use to specify category for instrumentation Profiler markers.
ProfilerCategoryDescription	Provides information about Profiler category.
ProfilerMarker	Performance marker used for profiling arbitrary code blocks.
ProfilerMarkerData	Describes Profiler metadata parameter that can be associated with a sample.
ProfilerRecorder	Records the Profiler metric data that a Profiler marker or counter produces.
ProfilerRecorderDescription	Gets the description of a Profiler metric.
ProfilerRecorderHandle	Gets the handle of a Profiler metric.
ProfilerRecorderSample	Sample value structure.
PropertyName	Represents a string as an int for efficient lookup and comparison. Use this for common PropertyNames.Internally stores just an int to represent the string. A PropertyName can be created from a string but can not be converted back to a string. The same string always results in the same int representing that string. Thus this is a very efficient string representation in both memory and speed when all you need is comparison.PropertyName is serializable.ToString() is only implemented for debugging purposes in the editor it returns "theName:3737" in the player it returns "Unknown:3737".
Quaternion	Quaternions are used to represent rotations.
RangeInt	Describes an integer range.
RasterState	Values for the raster state.
Ray	Representation of rays.
Ray2D	A ray in 2D space.
ReadCommand	Describes the offset, size, and destination buffer of a single read operation.
ReadCommandArray	An array of ReadCommand instances to pass to AsyncReadManager.Read and AsyncReadManager.ReadDeferred.
ReadHandle	You can use this handle to query the status of an asynchronous read operation. Note: To avoid a memory leak, you must call Dispose.
Rect	A 2D Rectangle defined by X and Y position, width and height.
RectangleLight	A helper structure used to initialize a LightDataGI structure as a rectangle light.
RectInt	A 2D Rectangle defined by x, y, width, height with integers.
ReflectionProbeBlendInfo	ReflectionProbeBlendInfo contains information required for blending probes.
RefreshRate	Represents the display refresh rate. This is how many frames the display can show per second.
RenderBuffer	Color or depth buffer part of a RenderTexture.
RendererList	Represents a subset of visible GameObjects.
RendererListDesc	Represents the set of GameObjects that a RendererList contains.
RenderParams	Rendering parameters used by various rendering functions.
RenderQueueRange	Describes a material render queue range.
RenderStateBlock	A set of values that Unity uses to override the GPU's render state.
RenderTargetBinding	Describes a render target with one or more color buffers, a depth/stencil buffer and the associated load/store-actions that are applied when the render target is active.
RenderTargetBlendState	Values for the blend state.
RenderTargetIdentifier	Identifies a RenderTexture for a CommandBuffer.
RenderTargetSetup	Fully describes setup of RenderTarget.
RenderTextureDescriptor	This struct contains all the information required to create a RenderTexture. It can be copied, cached, and reused to easily create RenderTextures that all share the same properties. Avoid using the default constructor as it does not initialize some flags with the recommended values.
Resolution	Represents a display resolution.
Scene	Run-time data structure for *.unity file.
ScopedRenderPass	Represents an active render pass until disposed.
ScopedSubPass	Represents an active sub pass until disposed.
ScriptableCullingParameters	Parameters that configure a culling operation in the Scriptable Render Pipeline.
ScriptableRenderContext	Defines state and drawing commands that custom render pipelines use.
ScriptPlayable<T0>	A IPlayable implementation that contains a PlayableBehaviour for the PlayableGraph. PlayableBehaviour can be used to write custom Playable that implement their own PrepareFrame callback.
ScriptPlayableOutput	A IPlayableOutput implementation that contains a script output for the a PlayableGraph.
SecondarySpriteTexture	Encapsulates a Texture2D and its shader property name to give Sprite-based renderers access to a secondary texture, in addition to the main Sprite texture.
SecondaryTileData	Defines the default look of secondary tile.
SemanticMeaning	Semantic meaning is a collection of semantic properties of a recognized phrase. These semantic properties can be specified in SRGS grammar files.
ShaderKeyword	Represents an identifier for a specific code path in a shader.
ShaderKeywordSet	A collection of ShaderKeyword that represents a specific shader variant.
ShaderTagId	Shader tag ids are used to refer to various names in shaders.
ShaderWarmupSetup	The rendering configuration to use when prewarming shader variants.
ShadowDrawingSettings	Settings for ScriptableRenderContext.DrawShadows.
ShadowSplitData	Describes the culling information for a given shadow split (e.g. directional cascade).
SortingLayer	SortingLayer allows you to set the render order of multiple sprites easily. There is always a default SortingLayer named "Default" which all sprites are added to initially. Added more SortingLayers to easily control the order of rendering of groups of sprites. Layers can be ordered before or after the default layer.
SortingLayerRange	Describes a renderer's sorting layer range.
SortingSettings	This struct describes the methods to sort objects during rendering.
SphericalHarmonicsL2	Spherical harmonics up to the second order (3 bands, 9 coefficients).
SpotLight	A helper structure used to initialize a LightDataGI structure as a spot light.
SpotLightBoxShape	Use this Struct to help initialize a LightDataGI structure as a box-shaped spot light.
SpotLightPyramidShape	Use this Struct to help initialize a LightDataGI structure as a pyramid-shaped spot light.
SpriteBone	Stores a set of information that describes the bind pose of this Sprite.
StencilState	Values for the stencil state.
SubMeshDescriptor	Contains information about a single sub-mesh of a Mesh.
TextureMixerPlayable	An implementation of IPlayable that allows mixing two textures.
TexturePlayableOutput	An IPlayableOutput implementation that will be used to manipulate textures.
TimeUpdate	Update phase in the native player loop that waits for the operating system (OS) to flip the back buffer to the display and update the time in the engine.
TransformAccess	Position, rotation and scale of an object.
TransformAccessArray	TransformAccessArray.
Update	Update phase in the native player loop.
Vector2	Representation of 2D vectors and points.
Vector2Int	Representation of 2D vectors and points using integers.
Vector3	Representation of 3D vectors and points.
Vector3Int	Representation of 3D vectors and points using integers.
Vector4	Representation of four-dimensional vectors.
VertexAttributeDescriptor	Information about a single VertexAttribute of a Mesh vertex.
VisibleLight	Holds data of a visible light.
VisibleReflectionProbe	Holds data of a visible reflection reflectionProbe.
Enumerations
ActivityIndicatorStyle	ActivityIndicator Style (iOS Specific).
Allocator	Used to specify allocation type for NativeArray.
AmbientMode	Ambient lighting mode.
AndroidActivityIndicatorStyle	ActivityIndicator Style (Android Specific).
AngularFalloffType	Sets the method to use to compute the angular attenuation of spot lights.
AnisotropicFiltering	Anisotropic filtering mode.
ApplicationInstallMode	Application installation mode (Read Only).
ApplicationSandboxType	Application sandbox type.
AssetLoadingSubsystem	Subsystem tags for the read request, describing broad asset type or subsystem that triggered the read request.
AtomicSafetyErrorType	Enumeration of AtomicSafetyHandle errors.
AudioType	Type of the imported(native) data.
BatteryStatus	Enumeration for SystemInfo.batteryStatus which represents the current status of the device's battery.
BlendMode	Blend mode for controlling the blending.
BlendOp	Blend operation.
BuiltinRenderTextureType	Built-in temporary render textures produced during camera's rendering.
BuiltinShaderDefine	Defines set by editor when compiling shaders, based on the target platform and GraphicsTier.
BuiltinShaderMode	Built-in shader modes used by GraphicsSettings.
BuiltinShaderType	Built-in shader types used by GraphicsSettings.
CameraClearFlags	Values for Camera.clearFlags, determining what to clear when rendering a Camera.
CameraEvent	Defines a place in camera's rendering to attach CommandBuffer objects to.
CameraHDRMode	The HDR mode to use for rendering.
CameraLateLatchMatrixType	The types of camera matrices that support late latching.
CameraType	Describes different types of camera.
CaptureFlags	Flags that specify which fields to capture in a snapshot.
CapturePixelFormat	The encoded image or video pixel format to use for PhotoCapture and VideoCapture.
ColorGamut	Represents a color gamut.
ColorSpace	Color space for player settings.
ColorWriteMask	Specifies which color components will get written into the target framebuffer.
CommandBufferExecutionFlags	Flags describing the intention for how the command buffer will be executed. Set these via CommandBuffer.SetExecutionFlags.
CompareFunction	Depth or stencil comparison function.
ComputeBufferMode	Intended usage of the buffer.
ComputeBufferType	ComputeBuffer type.
ComputeQueueType	Describes the desired characteristics with respect to prioritisation and load balancing of the queue that a command buffer being submitted via Graphics.ExecuteCommandBufferAsync or [[ScriptableRenderContext.ExecuteCommandBufferAsync] should be sent to.
ConfidenceLevel	Used by KeywordRecognizer, GrammarRecognizer, DictationRecognizer. Phrases under the specified minimum level will be ignored.
ConnectionTarget	The type of the connected target.
CopyTextureSupport	Support for various Graphics.CopyTexture cases.
CubemapFace	Cubemap face.
CullingOptions	Flags used by ScriptableCullingParameters.cullingOptions to configure a culling operation.
CullMode	Backface culling mode.
CursorLockMode	How the cursor should behave.
CursorMode	Determines whether the mouse cursor is rendered using software rendering or, on supported platforms, hardware rendering.
CustomRenderTextureInitializationSource	Specify the source of a Custom Render Texture initialization.
CustomRenderTextureUpdateMode	Frequency of update or initialization of a Custom Render Texture.
CustomRenderTextureUpdateZoneSpace	Space in which coordinates are provided for Update Zones.
D3DHDRDisplayBitDepth	The type for the number of bits to be used when an HDR display is active in each color channel of swap chain buffers. The bit count also defines the method Unity uses to render content to the display.
DefaultFormat	Use a default format to create either Textures or RenderTextures from scripts based on platform specific capability.
DefaultReflectionMode	Default reflection mode.
DepthTextureMode	Depth texture generation mode for Camera.
DeviceGeneration	tvOS device generation.
DeviceGeneration	iOS device generation.
DeviceType	Enumeration for SystemInfo.deviceType, denotes a coarse grouping of kinds of devices.
DictationCompletionCause	Represents the reason why dictation session has completed.
DictationTopicConstraint	DictationTopicConstraint enum specifies the scenario for which a specific dictation recognizer should optimize.
DirectorUpdateMode	Defines what time source is used to update a Director graph.
DirectorWrapMode	Wrap mode for Playables.
DistanceMetric	Type of sorting to use while rendering.
DOTSInstancingPropertyType	Describes the type of a DOTS instancing property.
DrivenTransformProperties	An enumeration of transform properties that can be driven on a RectTransform by an object.
EnforceJobResult	The result of requesting to enforce that all buffer jobs on an AtomicSafetyHandle have completed.
FalloffType	Available falloff models for baking.
FastMemoryFlags	Control Fast Memory render target layout.
FileReadType	The type of file read requested from the AsyncReadManager.
FileState	Defines the possible existential states of a file.
FileStatus	The possible statuses of a FileHandle.
FilterMode	Filtering mode for textures. Corresponds to the settings in a texture inspector.
FindObjectsInactive	Options to control whether object find functions return inactive objects.
FindObjectsSortMode	Options to specify if and how to sort objects returned by a function.
FogMode	Fog mode to use.
Folder	List of accessible folders on Windows Store Apps.
ForcedCrashCategory	Specifies the category of crash to cause when calling ForceCrash().
FormatSwizzle	Graphics Format Swizzle.
FormatUsage	Use this format usages to figure out the capabilities of specific GraphicsFormat
FrameCaptureDestination	Destination of Frame Capture This is a wrapper for MTLCaptureDestination.
FullScreenMode	Sets the full-screen mode. See the description of each mode for information on platform compatibility.
FullScreenMovieControlMode	Describes options for displaying movie playback controls.
FullScreenMovieScalingMode	Describes scaling modes for displaying movies.
GizmoSubset	Gizmo subsets.
GradientMode	Select how gradients will be evaluated.
GraphicsDeviceType	Graphics device API type.
GraphicsFenceType	The type of the GraphicsFence. Currently the only supported fence type is AsyncQueueSynchronization.
GraphicsFormat	Use this format to create either Textures or RenderTextures from scripts.
GraphicsTier	An enum that represents graphics tiers.
HDRDisplaySupportFlags	A set of flags that describe the level of HDR display support available on the system.
HideFlags	Bit mask that controls object destruction, saving and visibility in inspectors.
IndexFormat	Format of the mesh index buffer data.
KeyCode	Key codes returned by Event.keyCode. These map directly to a physical key on the keyboard.
LightEvent	Defines a place in light's rendering to attach CommandBuffer objects to.
LightmapBakeType	Enum describing what part of a light contribution can be baked.
LightmapCompression	A set of options for the level of compression the Editor uses for lightmaps.
LightmapsMode	Lightmap (and lighting) configuration mode, controls how lightmaps interact with lighting and what kind of information they store.
LightmapsModeLegacy	Single, dual, or directional lightmaps rendering mode, used only in GIWorkflowMode.Legacy
LightMode	The lightmode. A light can be real-time, mixed, baked or unknown. Unknown lights will be ignored by the baking backends.
LightProbeUsage	Light probe interpolation type.
LightRenderMode	How the Light is rendered.
LightShadowCasterMode	Allows mixed lights to control shadow caster culling when Shadowmasks are present.
LightShadowResolution	Shadow resolution options for a Light.
LightShadows	Shadow casting options for a Light.
LightShape	Describes the shape of a spot light.
LightType	The type of a Light.
LightType	The light type.
LineAlignment	Control the direction lines face, when using the LineRenderer or TrailRenderer.
LineTextureMode	Choose how textures are applied to Lines and Trails.
LoadSceneMode	Used when loading a Scene in a player.
LocalPhysicsMode	Provides options for 2D and 3D local physics.
LODFadeMode	The LOD (level of detail) fade modes. Modes other than LODFadeMode.None will result in Unity calculating a blend factor for blending/interpolating between two neighbouring LODs and pass it to your shader.
LogOption	Option flags for specifying special treatment of a log message.
LogType	The type of the log message in Debug.unityLogger.Log or delegate registered with Application.RegisterLogCallback.
MarkerFlags	Profiler marker usage flags.
MaterialGlobalIlluminationFlags	How the material interacts with lightmaps and lightprobes.
MeshTopology	Topology of Mesh faces.
MeshUpdateFlags	Mesh data update flags.
MixedLightingMode	Enum describing what lighting mode to be used with Mixed lights.
MotionVectorGenerationMode	The type of motion vectors that should be generated.
NativeArrayOptions	NativeArrayOptions lets you control if memory should be cleared on allocation or left uninitialized.
NativeLeakDetectionMode	Native leak memory leak detection mode enum.
NetworkReachability	Describes network reachability options.
NPOTSupport	NPOT textures support.
OpaqueSortMode	Opaque object sorting mode of a Camera.
OpenGLESVersion	Specifies the OpenGL ES version.
OperatingSystemFamily	Enumeration for SystemInfo.operatingSystemFamily.
PassType	Shader pass type for Unity's lighting pipeline.
PerObjectData	What kind of per-object data to setup during rendering.
PersistentListenerMode	The mode that a listener is operating in.
PhotoCaptureFileOutputFormat	Image Encoding Format.
PlayableTraversalMode	Traversal mode for Playables.
PlayState	Status of a Playable.
PrimitiveType	The various primitives that can be created using the GameObject.CreatePrimitive function.
Priority	The priority level attached to the AsyncReadManager read request.
ProcessingState	The state of the read request at the time of retrieval of AsyncReadManagerMetrics.
ProfilerArea	The different areas of profiling, corresponding to the charts in ProfilerWindow.
ProfilerCategoryColor	Profiler category colors enum.
ProfilerCategoryFlags	Options for determining if a Profiler category is built into Unity by default.
ProfilerFlowEventType	Defines Profiler flow event type.
ProfilerMarkerDataType	Options for the Profiler metadata type.
ProfilerMarkerDataUnit	Options for Profiler marker data unit types.
ProfilerRecorderOptions	ProfilerRecorder lifecycle and collection options.
RayTracingMode	Indicates how a Renderer is updated.
RayTracingSubMeshFlags	Flags that determine the behavior of a sub-mesh in a RayTracingAccelerationStructure.
ReadStatus	The state of an asynchronous file request.
RealtimeGICPUUsage	How much CPU usage to assign to the final lighting calculations at runtime.
ReceiveGI	This property only takes effect if you enable a global illumination setting such as Baked Global Illumination or Enlighten Realtime Global Illumination for the target Scene. When you enable ReceiveGI, you can determine whether illumination data at runtime will come from Light Probes or Lightmaps. When you set ReceiveGI to Lightmaps, the Mesh Renderer receives global illumination from lightmaps. That means the Renderer is included in lightmap atlases, possibly increasing their size, memory consumption and storage costs. Calculating global illumination values for texels in this Renderer also adds to bake times. When you set ReceiveGI to Light Probes, the Mesh Renderer is not assigned space in lightmap atlases. Instead it receives global illumination stored by Light Probes in the target Scene. This can reduce bake times by avoiding the memory consumption and storage cost associated with lightmaps. ReceiveGI is only editable if you enable StaticEditorFlags.ContributeGI for the GameObject associated with the target Mesh Renderer. Otherwise this property defaults to the Light Probes setting.
ReflectionCubemapCompression	Determines how Unity will compress baked reflection cubemap.
ReflectionProbeClearFlags	Values for ReflectionProbe.clearFlags, determining what to clear when rendering a ReflectionProbe.
ReflectionProbeMode	Reflection probe's update mode.
ReflectionProbeRefreshMode	An enum describing the way a real-time reflection probe refreshes in the Player.
ReflectionProbeSortingCriteria	Visible reflection probes sorting options.
ReflectionProbeTimeSlicingMode	When a probe's ReflectionProbe.refreshMode is set to ReflectionProbeRefreshMode.EveryFrame, this enum specify whether or not Unity should update the probe's cubemap over several frames or update the whole cubemap in one frame. Updating a probe's cubemap is a costly operation. Unity needs to render the entire Scene for each face of the cubemap, as well as perform special blurring in order to get glossy reflections. The impact on frame rate can be significant. Time-slicing helps maintaning a more constant frame rate during these updates by performing the rendering over several frames.
ReflectionProbeUsage	Reflection Probe usage.
RenderBufferLoadAction	This enum describes what should be done on the render target when it is activated (loaded).
RenderBufferStoreAction	This enum describes what should be done on the render target when the GPU is done rendering into it.
RendererListStatus	Options that represent the result of a ScriptableRenderContext.QueryRendererList operation.
RenderingPath	Rendering path of a Camera.
RenderingThreadingMode	Options for the application's actual rendering threading mode.
RenderQueue	Determine in which order objects are renderered.
RenderStateMask	Specifies which parts of the render state that is overriden.
RenderTargetFlags	This enum describes optional flags for the RenderTargetBinding structure.
RenderTextureCreationFlags	Set of flags that control the state of a newly-created RenderTexture.
RenderTextureFormat	Format of a RenderTexture.
RenderTextureMemoryless	Flags enumeration of the render texture memoryless modes.
RenderTextureReadWrite	Color space conversion mode of a RenderTexture.
RenderTextureSubElement	Types of data that you can encapsulate within a render texture.
RTClearFlags	Flags that determine which render targets Unity clears when you use CommandBuffer.ClearRenderTarget.
RuntimeInitializeLoadType	Set RuntimeInitializeOnLoadMethod type.
RuntimePlatform	The platform application is running. Returned by Application.platform.
ScheduleMode	ScheduleMode options for scheduling a manage job.
ScreenOrientation	Describes screen orientation.
SearchViewFlags	Search view flags used to open the Object Picker in various states.
SendMessageOptions	Options for how to send a message.
ShaderConstantType	Options for the shader constant value type.
ShaderKeywordType	Type of a shader keyword, eg: built-in or user defined.
ShaderParamType	Options for the data type of a shader constant's members.
ShaderPropertyFlags	Flags that control how a shader property behaves.
ShaderPropertyType	Type of a given shader property.
ShadowCastingMode	How shadows are cast from this object.
ShadowMapPass	Allows precise control over which shadow map passes to execute CommandBuffer objects attached using Light.AddCommandBuffer.
ShadowmaskMode	The rendering mode of Shadowmask.
ShadowObjectsFilter	The filters that Unity can use when it renders GameObjects in the shadow pass.
ShadowProjection	Shadow projection type for Quality Settings.
ShadowQuality	Determines which type of shadows should be used.
ShadowResolution	Default shadow resolution. Each decrease in quality level halves the resolution of shadows.
ShadowSamplingMode	Used by CommandBuffer.SetShadowSamplingMode.
SinglePassStereoMode	Enum type defines the different stereo rendering modes available.
SkinQuality	The maximum number of bones affecting a single vertex.
SkinWeights	Skin weights.
SnapAxis	Defines the axes that can be snapped.
SortingCriteria	How to sort objects during rendering.
Space	The coordinate space in which to operate.
SpeechError	Represents an error in a speech recognition system.
SpeechSystemStatus	Represents the current status of the speech recognition system or a dictation recognizer.
SpriteAlignment	How a Sprite's graphic rectangle is aligned with its pivot point.
SpriteDrawMode	SpriteRenderer draw mode.
SpriteMaskInteraction	This enum controls the mode under which the sprite will interact with the masking system.
SpriteMeshType	Defines the type of mesh generated for a sprite.
SpritePackingMode	Sprite packing modes for the Sprite Packer.
SpritePackingRotation	Sprite rotation modes for the Sprite Packer.
SpriteSortPoint	Determines the position of the Sprite used for sorting the Renderer.
SpriteTileMode	Tiling mode for SpriteRenderer.tileMode.
StackTraceLogType	Stack trace logging options.
StencilOp	Specifies the operation that's performed on the stencil buffer when rendering.
StereoTargetEyeMask	Enum values for the Camera's targetEye property.
SynchronisationStage	Broadly describes the stages of processing a draw call on the GPU.
SynchronisationStageFlags	Describes the various stages of GPU processing against which the GraphicsFence can be set and waited against.
SystemGestureDeferMode	Bit-mask used to control the deferring of system gestures on iOS.
SystemLanguage	The language the user's operating system is running in. Returned by Application.systemLanguage.
TextureDimension	Texture "dimension" (type).
TextureFormat	Format used when creating textures from scripts.
TextureWrapMode	Wrap mode for textures.
ThreadPriority	Priority of a thread.
TileForegroundText	Style for foreground text on a secondary tile.
TileTemplate	Templates for various tile styles.
ToastTemplate	Templates for various toast styles.
TouchScreenKeyboardType	Enumeration of the different types of supported touchscreen keyboards.
TransparencySortMode	Transparent object sorting mode of a Camera.
UnityEventCallState	Controls the scope of UnityEvent callbacks.
UnloadSceneOptions	Scene unloading options passed to SceneManager.UnloadScene.
UserAuthorization	Constants to pass to Application.RequestUserAuthorization.
VertexAttribute	Possible attribute types that describe a vertex in a Mesh.
VertexAttributeFormat	Data type of a VertexAttribute.
VideoShadersIncludeMode	Video shaders mode used by GraphicsSettings.
VRTextureUsage	This enum describes how the RenderTexture is used as a VR eye texture. Instead of using the values of this enum manually, use the value returned by eyeTextureDesc or other VR functions returning a RenderTextureDescriptor.
WebCamMode	Describes the active mode of the Web Camera resource.
WeightedMode	Sets which weights to use when calculating curve segments.
WindowActivationState	Specifies the set of reasons that a windowActivated event was raised.
WrapMode	Determines how time is treated outside of the keyframed range of an AnimationClip or AnimationCurve.
