Shader "Hidden/CameraBloodEffect"   //"Hidden/CameraBloodEffect", which starts with "Hidden" so it is not visible in the Shader dropdown menu.
{
    Properties
    {
        // This section defines the properties of the shader. In this case,
        // it defines a texture property called "_MainTex" with a default value of a white texture.
        _MainTex ("Texture", 2D) = "white" {}
    }
    SubShader
    {
        // This line specifies that the object being rendered should not be culled and should always be visible, regardless of any depth testing.
        Cull Off ZWrite Off ZTest Always
        
        Pass
        {
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "UnityCG.cginc"
          
            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                float4 vertex : SV_POSITION;
            };

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = v.uv;
                return o;
            }
            //This section starts a new rendering pass, and then defines the vertex and fragment programs to be used by this pass.
            The #pragma vertex and #pragma fragment directives tell the compiler which functions to use as the vertex and fragment shaders.
            The #include directive includes the "UnityCG.cginc" file, which contains commonly used functions and variables for Unity shaders.
            The appdata struct defines the format of the input vertex data. It includes a float4 position and a float2 UV coordinate.
            The v2f struct defines the output data from the vertex shader. It includes a float2 UV coordinate and a float4 clip space position.
            The vert function is the vertex shader. It takes an appdata input and outputs a v2f struct with the transformed vertex position and UV coordinates.
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            sampler2D _MainTex;

            fixed4 frag (v2f i) : SV_Target
            {
                fixed4 col = tex2D(_MainTex, i.uv);
                // just invert the colors
                col.rgb = 1 - col.rgb;
                return col;
            }
            ENDCG
        }
    }
}
**sampler2D**
This section defines the fragment shader, which takes the UV coordinates from the vertex shader and samples the texture to produce a final color output.
The sampler2D variable _MainTex is used to access the texture property defined earlier.
The frag function is the fragment shader, which takes a v2f input and outputs a fixed4 color value. In this case, it inverts the RGB color values of the texture and returns the result as the output color.
Finally, the ENDCG directive signals the end of the shader code.




